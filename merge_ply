import open3d as o3d
import numpy as np
import glob

def pairwise_icp(source, target, voxel_size):
    source_down = source.voxel_down_sample(voxel_size)
    target_down = target.voxel_down_sample(voxel_size)

    source_down.estimate_normals(o3d.geometry.KDTreeSearchParamHybrid(radius=voxel_size*2, max_nn=30))
    target_down.estimate_normals(o3d.geometry.KDTreeSearchParamHybrid(radius=voxel_size*2, max_nn=30))

    result = o3d.pipelines.registration.registration_icp(
        source_down, target_down, max_correspondence_distance=voxel_size*1.5,
        estimation_method=o3d.pipelines.registration.TransformationEstimationPointToPlane(),
        init=np.eye(4)
    )
    return result.transformation

# === Load all PLYs ===
ply_paths = sorted(glob.glob("output_pointclouds/cloud_*.ply"))
print(f"[INFO] Found {len(ply_paths)} point clouds")

merged_cloud = o3d.io.read_point_cloud(ply_paths[0])
voxel_size = 0.02  # Tune based on scale of your data

for i in range(1, len(ply_paths)):
    print(f"[INFO] Aligning {ply_paths[i]}...")

    src = o3d.io.read_point_cloud(ply_paths[i])
    transformation = pairwise_icp(src, merged_cloud, voxel_size)
    src.transform(transformation)
    merged_cloud += src
    merged_cloud = merged_cloud.voxel_down_sample(voxel_size)

# === Save and Show Result ===
o3d.io.write_point_cloud("merged_map.ply", merged_cloud)
print("[DONE] Merged map saved to merged_map.ply")

o3d.visualization.draw_geometries([merged_cloud])
